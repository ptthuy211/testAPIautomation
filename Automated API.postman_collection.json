{
	"info": {
		"_postman_id": "58ba56ef-2407-4a08-8ff1-8c8fdd5c34ed",
		"name": "Automated API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8022784"
	},
	"item": [
		{
			"name": "TEMPLATE",
			"item": [
				{
					"name": "Mock - Register New User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const resBody            = pm.response.json();\r",
									"const testCase           = pm.variables.get('testCase');\r",
									"const email              = pm.variables.get('email');\r",
									"const password           = pm.variables.get('password');\r",
									"const expectedCode       = pm.variables.get('expectedCode');\r",
									"const expectedMessage    = pm.variables.get('expectedMessage');\r",
									"\r",
									"pm.test(`[${testCase}] - (Email: [${email}] and Password: [${password}])`, () => {\r",
									"  pm.response.to.have.status(expectedCode);\r",
									"});\r",
									"\r",
									"pm.test(`Verify Status code is [${expectedCode}]`, () => {\r",
									"    pm.expect(pm.response.code).to.equal(expectedCode);\r",
									"});\r",
									"\r",
									"pm.test(`Verify Response body contains [${expectedMessage}]`, () => {\r",
									"    pm.expect(JSON.stringify(resBody)).to.contain(expectedMessage);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify Response time is less than 900ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{masterURL}}/api/register",
							"host": [
								"{{masterURL}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": [
						{
							"name": "Register successfully with valid email and password",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"status": "Bad Request",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 15 Jul 2024 15:53:15 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "57"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1721058795&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=kwVhwgQNHxX7Wc5NTiWnlTsKeTFSkDqu3AO9AYQmsqc%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1721058795&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=kwVhwgQNHxX7Wc5NTiWnlTsKeTFSkDqu3AO9AYQmsqc%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"39-6jrJxn+7f+pQUhbPgNMst7tagpA\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8a3aec9c0d6aa8f7-SIN"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": {\n        \"email\": \"{{$body 'email'}}\",  \n        \"message\": \"Register successfully\",\n        \"id\": {{$randomInt}},\n        \"token\": \"{{$randomUUID}}\"\n    }\n}"
						},
						{
							"name": "Register failed due to missing password",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 15 Jul 2024 15:48:14 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "28"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1721058494&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=2rxpq1mqN5eh%2BiY2r8RMUHSjQAfdLHDycBh7l8Xom6Q%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1721058494&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=2rxpq1mqN5eh%2BiY2r8RMUHSjQAfdLHDycBh7l8Xom6Q%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"1c-NmpazMScs9tOqR7eDEesn+pqC9Q\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8a3ae5438abca8f7-SIN"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Missing password\"\n}"
						},
						{
							"name": "Register failed due to invaid email format",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"email\",\r\n    \"password\": \"password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/register",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 15 Jul 2024 15:50:48 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "57"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Report-To",
									"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1721058648&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=7D0gHzqfbd6UIDDh274ni02%2Fo%2BmFDtF5TMlSNh9DW2Y%3D\"}]}"
								},
								{
									"key": "Reporting-Endpoints",
									"value": "heroku-nel=https://nel.heroku.com/reports?ts=1721058648&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=7D0gHzqfbd6UIDDh274ni02%2Fo%2BmFDtF5TMlSNh9DW2Y%3D"
								},
								{
									"key": "Nel",
									"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
								},
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "Etag",
									"value": "W/\"39-6jrJxn+7f+pQUhbPgNMst7tagpA\""
								},
								{
									"key": "Via",
									"value": "1.1 vegur"
								},
								{
									"key": "CF-Cache-Status",
									"value": "DYNAMIC"
								},
								{
									"key": "Server",
									"value": "cloudflare"
								},
								{
									"key": "CF-RAY",
									"value": "8a3ae909597ba8f7-SIN"
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": \"Email is not valid\"\n}"
						}
					]
				},
				{
					"name": "Mock request - Register user successfully",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Functionality tests\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check Token & Id \", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    console.log(\"Test Token is \" + responseData.data.token);\r",
									"     console.log(\"Test Id is \" + responseData.data.id);\r",
									"});\r",
									"\r",
									"//Write functionality tests\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"ID is a non-negative integer\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.data.id).to.be.a('number').and.to.satisfy((id) => id >= 0, \"ID should be a non-negative integer\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// write security tests\r",
									"\r",
									"pm.test(\"Response does not contain sensitive information\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.not.have.any.keys('password', 'email', 'ssn', 'dob', 'creditCardNumber', 'phone', 'address');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token is generated using a secure and strong algorithm\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.data.token).to.be.a('string');\r",
									"    pm.expect(responseData.data.token).to.have.lengthOf.at.least(16, \"Token length should be at least 16 characters\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Token is not an empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.data.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//write performance test\r",
									"pm.test(\"Response time is less than 2000ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(2000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within the defined SLA limits\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "x-mock-match-request-headers",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}"
						},
						"url": {
							"raw": "{{mockURL}}/api/register",
							"host": [
								"{{mockURL}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock request - Register user with missing password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check functionality cases\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is present in the response\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.error).equal('Missing password');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Error message should not be empty\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify that the response body is in a valid JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//check security cases\r",
									"\r",
									"pm.test(\"Error message does not reveal potential security vulnerabilities\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');\r",
									"    pm.expect(responseData.error).to.not.match(/<script>|<iframe>|<svg>|<img>/i);\r",
									"});\r",
									"\r",
									"pm.test(\"Ensure response does not contain SQL injection or common security attack patterns\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.error).to.not.match(/(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|TRUNCATE)/i, \"Should not contain SQL injection keywords\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Proper error handling for security-related scenarios\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"//check performance cases\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response size is within the acceptable range\", function () {\r",
									"  pm.expect(pm.response.text()).to.have.length.within(10, 100);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Caching headers and optimization are not present\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.not.exist;\r",
									"    pm.expect(pm.response.headers.get(\"Pragma\")).to.not.exist;\r",
									"    pm.expect(pm.response.headers.get(\"Expires\")).to.not.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Response does not contain excessive or unnecessary data\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.have.all.keys('error');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"\"\r\n}"
						},
						"url": {
							"raw": "{{mockURL}}/api/register",
							"host": [
								"{{mockURL}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Mock request - Register user with invalid email format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check functionality cases\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is present in the response\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.error).equal('Email is not valid');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the response body is in a valid JSON format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"//check security cases\r",
									"\r",
									"pm.test(\"Response is not vulnerable to common security threats\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.error).to.not.match(/<script>|<\\/script>|<\\?php|<\\?|%3Cscript|%3C\\/script|%3C\\?php|%3C\\?/i, \"No common security threats detected\");\r",
									"});\r",
									"\r",
									"//check performance cases\r",
									"pm.test(\"Response time is less than 900ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response size is within a reasonable limit\", function () {\r",
									"    pm.expect(pm.response.text()).to.have.length.below(1000);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"email\",\r\n    \"password\": \"password\"\r\n}"
						},
						"url": {
							"raw": "{{mockURL}}/api/register",
							"host": [
								"{{mockURL}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "E2E - USER FEATURE",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Random Email Account With This Format: thuy_xxxxxx@gmail.com\r",
									"\r",
									"var randomValue = Math.floor(Math.random() * 100000) + 1000;\r",
									"\r",
									"pm.environment.set (\"randomEmail\", 'thuy' + randomValue.toString() + '@reqres.in');\r",
									"\r",
									"// Random Password\r",
									"\r",
									"pm.environment.set (\"randomPassword\", 'pass' + randomValue.toString());\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resBody            = pm.response.json();\r",
									"const testCase           = pm.variables.get('testCase');\r",
									"const email              = pm.variables.get('email');\r",
									"const password           = pm.variables.get('password');\r",
									"const expectedCode       = pm.variables.get('expectedCode');\r",
									"const expectedMessage    = pm.variables.get('expectedMessage');\r",
									"\r",
									"\r",
									"//Write functionality tests\r",
									"\r",
									"pm.test(`[${testCase}] - (Email: [${email}] and Password: [${password}])`, () => {\r",
									"  pm.response.to.have.status(expectedCode);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(`Verify Status code is [${expectedCode}]`, () => {\r",
									"    pm.expect(pm.response.code).to.equal(expectedCode);\r",
									"});\r",
									"\r",
									"pm.test(`Verify Response body contains [${expectedMessage}]`, () => {\r",
									"    pm.expect(JSON.stringify(resBody)).to.contain(expectedMessage);\r",
									"});\r",
									"\r",
									"\r",
									"// Assign id & token into the Environment variable\r",
									"pm.test(\"Assign 'id' & 'token' to Environment 'Practice_API'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.environment.set(\"ID\", jsonData.id);\r",
									"    pm.environment.set(\"Token\", jsonData.token);  \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"// write security tests\r",
									"pm.test(\"Password should not appear in the response\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"\r",
									"    pm.expect(responseData.password).to.not.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response does not contain sensitive information\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData).to.not.have.any.keys('password', 'email', 'ssn', 'dob', 'creditCardNumber', 'phone', 'address');\r",
									"});\r",
									"\r",
									"//write performance test\r",
									"pm.test(\"Response time is less than 700ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(700);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within the defined SLA limits\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}"
						},
						"url": {
							"raw": "{{masterURL}}/api/register",
							"host": [
								"{{masterURL}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Random Name\r",
									"var randomValue = Math.floor(Math.random() * 100000) + 1000;\r",
									"\r",
									"pm.environment.set (\"randomName\", 'name_' + randomValue.toString());\r",
									"\r",
									"// Random Job\r",
									"\r",
									"pm.environment.set (\"randomJob\", 'job_' + randomValue.toString());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{randomName}}\",\r\n    \"job\": \"{{randomJob}}\"\r\n}\r\n\r\n// get newname + newjob from environment variables\r\n\r\n"
						},
						"url": {
							"raw": "{{masterURL}}/api/users/2",
							"host": [
								"{{masterURL}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify valid email 'janet.weaver@reqres.in'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.data.email).to.eql(\"janet.weaver@reqres.in\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{masterURL}}/api/users/2",
							"host": [
								"{{masterURL}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 900ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{masterURL}}/api/users/2",
							"host": [
								"{{masterURL}}"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users - Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string 'Weaver'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Weaver\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{masterURL}}/api/users?per_page=2",
							"host": [
								"{{masterURL}}"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "per_page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users - Page Not Found 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 600ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{masterURL}}/api/users/all",
							"host": [
								"{{masterURL}}"
							],
							"path": [
								"api",
								"users",
								"all"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://reqres.in",
			"type": "string"
		},
		{
			"key": "email",
			"value": "eve.holt@reqres.in",
			"type": "string"
		},
		{
			"key": "password",
			"value": "pistol",
			"type": "string"
		}
	]
}